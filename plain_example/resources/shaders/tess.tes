#version 400
#pragma debug(on)

layout(triangles, equal_spacing, ccw) in;

in rawVertex {
    vec3 position;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
} input[];

out rawVertex {
    vec3 position;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
} output;

uniform sampler2D heightTexture;
uniform sampler2D normalTexture;

uniform float tessScale;

const vec2 size = vec2(2.0,0.0);
const ivec3 off = ivec3(-1,0,1);

//in case there is no normal map, an algorithm like this could be used
//Note: This is not complete. To rotate the normal around the correct axis, tangentspace must be used.
//This works, because tangentspace is spanned using texture coordinates.  Alternatively, it may be possible to use derivates of input[i].texCoords here.
vec3 normalFromHeightMap(sampler2D tex, vec2 tex_coord)
{
    float s11 = texture(tex, tex_coord).x;
    float s01 = textureOffset(tex, tex_coord, off.xy).x;
    float s21 = textureOffset(tex, tex_coord, off.zy).x;
    float s10 = textureOffset(tex, tex_coord, off.yx).x;
    float s12 = textureOffset(tex, tex_coord, off.yz).x;
    vec3 va = normalize(vec3(size.xy,s21-s01));
    vec3 vb = normalize(vec3(size.yx,s12-s10));
    return cross(va,vb);
}

void main()
{
    vec3 p0 = gl_TessCoord.x * input[0].position;
    vec3 p1 = gl_TessCoord.y * input[1].position;
    vec3 p2 = gl_TessCoord.z * input[2].position;
	vec3 position = p0+p1+p2;
	
    vec3 n0 = gl_TessCoord.x * input[0].normal;
    vec3 n1 = gl_TessCoord.y * input[1].normal;
    vec3 n2 = gl_TessCoord.z * input[2].normal;
	vec3 normal = n0+n1+n2;
	
    vec3 ta0 = gl_TessCoord.x * input[0].tangent;
    vec3 ta1 = gl_TessCoord.y * input[1].tangent;
    vec3 ta2 = gl_TessCoord.z * input[2].tangent;
	vec3 tangent = ta0+ta1+ta2;
	
    vec3 bt0 = gl_TessCoord.x * input[0].bitangent;
    vec3 bt1 = gl_TessCoord.y * input[1].bitangent;
    vec3 bt2 = gl_TessCoord.z * input[2].bitangent;
	vec3 bitangent = bt0+bt1+bt2;
	
    vec2 t0 = gl_TessCoord.x * input[0].texCoords;
    vec2 t1 = gl_TessCoord.y * input[1].texCoords;
    vec2 t2 = gl_TessCoord.z * input[2].texCoords;
	vec2 texCoords = t0+t1+t2;
	
	vec2 uv = position.xy;
	float bump = texture(heightTexture,  texCoords).x;
	output.position = position+normal*(bump-0.5)*tessScale*0.01;
	output.normal = normal;
	output.tangent = tangent;
	output.bitangent = bitangent;
	output.texCoords = texCoords;
}
